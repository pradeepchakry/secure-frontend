{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule cx\n */\n\n\nvar slashReplaceRegex = /\\//g;\nvar cache = {};\n\nfunction getClassName(className) {\n  if (cache[className]) {\n    return cache[className];\n  }\n\n  cache[className] = className.replace(slashReplaceRegex, '_');\n  return cache[className];\n}\n/**\n * This function is used to mark string literals representing CSS class names\n * so that they can be transformed statically. This allows for modularization\n * and minification of CSS class names.\n *\n * In static_upstream, this function is actually implemented, but it should\n * eventually be replaced with something more descriptive, and the transform\n * that is used in the main stack should be ported for use elsewhere.\n *\n * @param string|object className to modularize, or an object of key/values.\n *                      In the object case, the values are conditions that\n *                      determine if the className keys should be included.\n * @param [string ...]  Variable list of classNames in the string case.\n * @return string       Renderable space-separated CSS className.\n */\n\n\nfunction cx(classNames) {\n  var classNamesArray;\n\n  if (_typeof(classNames) == 'object') {\n    classNamesArray = Object.keys(classNames).filter(function (className) {\n      return classNames[className];\n    });\n  } else {\n    classNamesArray = Array.prototype.slice.call(arguments);\n  }\n\n  return classNamesArray.map(getClassName).join(' ');\n}\n\nvar _default = cx;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/home/discovery/Documents/secure-frontend/node_modules/fixed-data-table-2/internal/cx.js"],"names":["Object","defineProperty","exports","value","_typeof","obj","Symbol","iterator","constructor","prototype","slashReplaceRegex","cache","getClassName","className","replace","cx","classNames","classNamesArray","keys","filter","Array","slice","call","arguments","map","join","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,SAASE,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;AAE1X;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,iBAAiB,GAAG,KAAxB;AACA,IAAIC,KAAK,GAAG,EAAZ;;AAEA,SAASC,YAAT,CAAsBC,SAAtB,EAAiC;AAC/B,MAAIF,KAAK,CAACE,SAAD,CAAT,EAAsB;AACpB,WAAOF,KAAK,CAACE,SAAD,CAAZ;AACD;;AAEDF,EAAAA,KAAK,CAACE,SAAD,CAAL,GAAmBA,SAAS,CAACC,OAAV,CAAkBJ,iBAAlB,EAAqC,GAArC,CAAnB;AACA,SAAOC,KAAK,CAACE,SAAD,CAAZ;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASE,EAAT,CAAYC,UAAZ,EAAwB;AACtB,MAAIC,eAAJ;;AAEA,MAAIb,OAAO,CAACY,UAAD,CAAP,IAAuB,QAA3B,EAAqC;AACnCC,IAAAA,eAAe,GAAGjB,MAAM,CAACkB,IAAP,CAAYF,UAAZ,EAAwBG,MAAxB,CAA+B,UAAUN,SAAV,EAAqB;AACpE,aAAOG,UAAU,CAACH,SAAD,CAAjB;AACD,KAFiB,CAAlB;AAGD,GAJD,MAIO;AACLI,IAAAA,eAAe,GAAGG,KAAK,CAACX,SAAN,CAAgBY,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAlB;AACD;;AAED,SAAON,eAAe,CAACO,GAAhB,CAAoBZ,YAApB,EAAkCa,IAAlC,CAAuC,GAAvC,CAAP;AACD;;AAED,IAAIC,QAAQ,GAAGX,EAAf;AACAb,OAAO,CAAC,SAAD,CAAP,GAAqBwB,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule cx\n */\nvar slashReplaceRegex = /\\//g;\nvar cache = {};\n\nfunction getClassName(className) {\n  if (cache[className]) {\n    return cache[className];\n  }\n\n  cache[className] = className.replace(slashReplaceRegex, '_');\n  return cache[className];\n}\n/**\n * This function is used to mark string literals representing CSS class names\n * so that they can be transformed statically. This allows for modularization\n * and minification of CSS class names.\n *\n * In static_upstream, this function is actually implemented, but it should\n * eventually be replaced with something more descriptive, and the transform\n * that is used in the main stack should be ported for use elsewhere.\n *\n * @param string|object className to modularize, or an object of key/values.\n *                      In the object case, the values are conditions that\n *                      determine if the className keys should be included.\n * @param [string ...]  Variable list of classNames in the string case.\n * @return string       Renderable space-separated CSS className.\n */\n\n\nfunction cx(classNames) {\n  var classNamesArray;\n\n  if (_typeof(classNames) == 'object') {\n    classNamesArray = Object.keys(classNames).filter(function (className) {\n      return classNames[className];\n    });\n  } else {\n    classNamesArray = Array.prototype.slice.call(arguments);\n  }\n\n  return classNamesArray.map(getClassName).join(' ');\n}\n\nvar _default = cx;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}