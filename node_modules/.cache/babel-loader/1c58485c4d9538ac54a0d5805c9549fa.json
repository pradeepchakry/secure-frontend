{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule debounceCore\n * @typechecks\n */\n\n/**\n * Invokes the given callback after a specified number of milliseconds have\n * elapsed, ignoring subsequent calls.\n *\n * For example, if you wanted to update a preview after the user stops typing\n * you could do the following:\n *\n *   elem.addEventListener('keyup', debounce(this.updatePreview, 250), false);\n *\n * The returned function has a reset method which can be called to cancel a\n * pending invocation.\n *\n *   var debouncedUpdatePreview = debounce(this.updatePreview, 250);\n *   elem.addEventListener('keyup', debouncedUpdatePreview, false);\n *\n *   // later, to cancel pending calls\n *   debouncedUpdatePreview.reset();\n *\n * @param {function} func - the function to debounce\n * @param {number} wait - how long to wait in milliseconds\n * @param {*} context - optional context to invoke the function in\n * @param {?function} setTimeoutFunc - an implementation of setTimeout\n *  if nothing is passed in the default setTimeout function is used\n  * @param {?function} clearTimeoutFunc - an implementation of clearTimeout\n *  if nothing is passed in the default clearTimeout function is used\n */\n\nfunction debounce(func, wait, context, setTimeoutFunc, clearTimeoutFunc) {\n  setTimeoutFunc = setTimeoutFunc || setTimeout;\n  clearTimeoutFunc = clearTimeoutFunc || clearTimeout;\n  var timeout;\n\n  function debouncer() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    debouncer.reset();\n\n    var callback = function callback() {\n      func.apply(context, args);\n    };\n\n    callback.__SMmeta = func.__SMmeta;\n    timeout = setTimeoutFunc(callback, wait);\n  }\n\n  debouncer.reset = function () {\n    clearTimeoutFunc(timeout);\n  };\n\n  return debouncer;\n}\n\nvar _default = debounce;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/home/discovery/Documents/secure-frontend/node_modules/fixed-data-table-2/internal/debounceCore.js"],"names":["Object","defineProperty","exports","value","debounce","func","wait","context","setTimeoutFunc","clearTimeoutFunc","setTimeout","clearTimeout","timeout","debouncer","_len","arguments","length","args","Array","_key","reset","callback","apply","__SMmeta","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,OAA9B,EAAuCC,cAAvC,EAAuDC,gBAAvD,EAAyE;AACvED,EAAAA,cAAc,GAAGA,cAAc,IAAIE,UAAnC;AACAD,EAAAA,gBAAgB,GAAGA,gBAAgB,IAAIE,YAAvC;AACA,MAAIC,OAAJ;;AAEA,WAASC,SAAT,GAAqB;AACnB,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAEDN,IAAAA,SAAS,CAACO,KAAV;;AAEA,QAAIC,QAAQ,GAAG,SAASA,QAAT,GAAoB;AACjChB,MAAAA,IAAI,CAACiB,KAAL,CAAWf,OAAX,EAAoBU,IAApB;AACD,KAFD;;AAIAI,IAAAA,QAAQ,CAACE,QAAT,GAAoBlB,IAAI,CAACkB,QAAzB;AACAX,IAAAA,OAAO,GAAGJ,cAAc,CAACa,QAAD,EAAWf,IAAX,CAAxB;AACD;;AAEDO,EAAAA,SAAS,CAACO,KAAV,GAAkB,YAAY;AAC5BX,IAAAA,gBAAgB,CAACG,OAAD,CAAhB;AACD,GAFD;;AAIA,SAAOC,SAAP;AACD;;AAED,IAAIW,QAAQ,GAAGpB,QAAf;AACAF,OAAO,CAAC,SAAD,CAAP,GAAqBsB,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\n/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule debounceCore\n * @typechecks\n */\n\n/**\n * Invokes the given callback after a specified number of milliseconds have\n * elapsed, ignoring subsequent calls.\n *\n * For example, if you wanted to update a preview after the user stops typing\n * you could do the following:\n *\n *   elem.addEventListener('keyup', debounce(this.updatePreview, 250), false);\n *\n * The returned function has a reset method which can be called to cancel a\n * pending invocation.\n *\n *   var debouncedUpdatePreview = debounce(this.updatePreview, 250);\n *   elem.addEventListener('keyup', debouncedUpdatePreview, false);\n *\n *   // later, to cancel pending calls\n *   debouncedUpdatePreview.reset();\n *\n * @param {function} func - the function to debounce\n * @param {number} wait - how long to wait in milliseconds\n * @param {*} context - optional context to invoke the function in\n * @param {?function} setTimeoutFunc - an implementation of setTimeout\n *  if nothing is passed in the default setTimeout function is used\n  * @param {?function} clearTimeoutFunc - an implementation of clearTimeout\n *  if nothing is passed in the default clearTimeout function is used\n */\nfunction debounce(func, wait, context, setTimeoutFunc, clearTimeoutFunc) {\n  setTimeoutFunc = setTimeoutFunc || setTimeout;\n  clearTimeoutFunc = clearTimeoutFunc || clearTimeout;\n  var timeout;\n\n  function debouncer() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    debouncer.reset();\n\n    var callback = function callback() {\n      func.apply(context, args);\n    };\n\n    callback.__SMmeta = func.__SMmeta;\n    timeout = setTimeoutFunc(callback, wait);\n  }\n\n  debouncer.reset = function () {\n    clearTimeoutFunc(timeout);\n  };\n\n  return debouncer;\n}\n\nvar _default = debounce;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}