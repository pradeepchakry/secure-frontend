{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _shallowEqualSelector = _interopRequireDefault(require('./shallowEqualSelector'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ariaAttributes\n */\n\n/**\n * Calculate the aria attributes for the rows and the grid.\n *\n * @param {number} rowsCount\n * @param {boolean} useGroupHeader\n * @param {boolean} useFooter\n * @return {{\n *   ariaGroupHeaderIndex: number,\n *   ariaHeaderIndex: number,\n *   ariaFooterIndex: number,\n *   ariaRowCount: number,\n *   ariaRowIndexOffset: number\n * }}\n */\n\n\nfunction calculateAriaAttributes(rowsCount, useGroupHeader, useFooter) {\n  // first we calculate the default attribute values (without assuming group header or footer exists)\n  var ariaGroupHeaderIndex = 1;\n  var ariaHeaderIndex = 1;\n  var ariaFooterIndex = rowsCount + 2;\n  var ariaRowCount = rowsCount + 1; // offset to add to aria-rowindex (note that aria-rowindex is 1-indexed based, and since\n  // we also need to add 1 for the header, the base offset will be 2)\n\n  var ariaRowIndexOffset = 2; // if group header exists, then increase the indices and offsets by 1\n\n  if (useGroupHeader) {\n    ariaHeaderIndex++;\n    ariaRowCount++;\n    ariaFooterIndex++;\n    ariaRowIndexOffset++;\n  } // if footer exists, then row count increases by 1\n\n\n  if (useFooter) {\n    ariaRowCount++;\n  }\n\n  return {\n    ariaGroupHeaderIndex: ariaGroupHeaderIndex,\n    ariaHeaderIndex: ariaHeaderIndex,\n    ariaFooterIndex: ariaFooterIndex,\n    ariaRowCount: ariaRowCount,\n    ariaRowIndexOffset: ariaRowIndexOffset\n  };\n}\n\nvar _default = (0, _shallowEqualSelector[\"default\"])([function (state) {\n  return state.rowsCount;\n}, function (state) {\n  return state.groupHeaderHeight > 0;\n}, function (state) {\n  return state.footerHeight > 0;\n}], calculateAriaAttributes);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/home/discovery/Documents/secure-frontend/node_modules/fixed-data-table-2/internal/ariaAttributes.js"],"names":["Object","defineProperty","exports","value","_shallowEqualSelector","_interopRequireDefault","require","obj","__esModule","calculateAriaAttributes","rowsCount","useGroupHeader","useFooter","ariaGroupHeaderIndex","ariaHeaderIndex","ariaFooterIndex","ariaRowCount","ariaRowIndexOffset","_default","state","groupHeaderHeight","footerHeight"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,qBAAqB,GAAGC,sBAAsB,CAACC,OAAO,CAAC,wBAAD,CAAR,CAAlD;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;AAEjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,uBAAT,CAAiCC,SAAjC,EAA4CC,cAA5C,EAA4DC,SAA5D,EAAuE;AACrE;AACA,MAAIC,oBAAoB,GAAG,CAA3B;AACA,MAAIC,eAAe,GAAG,CAAtB;AACA,MAAIC,eAAe,GAAGL,SAAS,GAAG,CAAlC;AACA,MAAIM,YAAY,GAAGN,SAAS,GAAG,CAA/B,CALqE,CAKnC;AAClC;;AAEA,MAAIO,kBAAkB,GAAG,CAAzB,CARqE,CAQzC;;AAE5B,MAAIN,cAAJ,EAAoB;AAClBG,IAAAA,eAAe;AACfE,IAAAA,YAAY;AACZD,IAAAA,eAAe;AACfE,IAAAA,kBAAkB;AACnB,GAfoE,CAenE;;;AAGF,MAAIL,SAAJ,EAAe;AACbI,IAAAA,YAAY;AACb;;AAED,SAAO;AACLH,IAAAA,oBAAoB,EAAEA,oBADjB;AAELC,IAAAA,eAAe,EAAEA,eAFZ;AAGLC,IAAAA,eAAe,EAAEA,eAHZ;AAILC,IAAAA,YAAY,EAAEA,YAJT;AAKLC,IAAAA,kBAAkB,EAAEA;AALf,GAAP;AAOD;;AAED,IAAIC,QAAQ,GAAG,CAAC,GAAGd,qBAAqB,CAAC,SAAD,CAAzB,EAAsC,CAAC,UAAUe,KAAV,EAAiB;AACrE,SAAOA,KAAK,CAACT,SAAb;AACD,CAFoD,EAElD,UAAUS,KAAV,EAAiB;AAClB,SAAOA,KAAK,CAACC,iBAAN,GAA0B,CAAjC;AACD,CAJoD,EAIlD,UAAUD,KAAV,EAAiB;AAClB,SAAOA,KAAK,CAACE,YAAN,GAAqB,CAA5B;AACD,CANoD,CAAtC,EAMXZ,uBANW,CAAf;;AAQAP,OAAO,CAAC,SAAD,CAAP,GAAqBgB,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _shallowEqualSelector = _interopRequireDefault(require('./shallowEqualSelector'));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ariaAttributes\n */\n\n/**\n * Calculate the aria attributes for the rows and the grid.\n *\n * @param {number} rowsCount\n * @param {boolean} useGroupHeader\n * @param {boolean} useFooter\n * @return {{\n *   ariaGroupHeaderIndex: number,\n *   ariaHeaderIndex: number,\n *   ariaFooterIndex: number,\n *   ariaRowCount: number,\n *   ariaRowIndexOffset: number\n * }}\n */\nfunction calculateAriaAttributes(rowsCount, useGroupHeader, useFooter) {\n  // first we calculate the default attribute values (without assuming group header or footer exists)\n  var ariaGroupHeaderIndex = 1;\n  var ariaHeaderIndex = 1;\n  var ariaFooterIndex = rowsCount + 2;\n  var ariaRowCount = rowsCount + 1; // offset to add to aria-rowindex (note that aria-rowindex is 1-indexed based, and since\n  // we also need to add 1 for the header, the base offset will be 2)\n\n  var ariaRowIndexOffset = 2; // if group header exists, then increase the indices and offsets by 1\n\n  if (useGroupHeader) {\n    ariaHeaderIndex++;\n    ariaRowCount++;\n    ariaFooterIndex++;\n    ariaRowIndexOffset++;\n  } // if footer exists, then row count increases by 1\n\n\n  if (useFooter) {\n    ariaRowCount++;\n  }\n\n  return {\n    ariaGroupHeaderIndex: ariaGroupHeaderIndex,\n    ariaHeaderIndex: ariaHeaderIndex,\n    ariaFooterIndex: ariaFooterIndex,\n    ariaRowCount: ariaRowCount,\n    ariaRowIndexOffset: ariaRowIndexOffset\n  };\n}\n\nvar _default = (0, _shallowEqualSelector[\"default\"])([function (state) {\n  return state.rowsCount;\n}, function (state) {\n  return state.groupHeaderHeight > 0;\n}, function (state) {\n  return state.footerHeight > 0;\n}], calculateAriaAttributes);\n\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}