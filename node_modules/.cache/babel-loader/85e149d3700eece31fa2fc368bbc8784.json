{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _Scrollbar = _interopRequireDefault(require('./Scrollbar'));\n\nvar _roughHeights = _interopRequireDefault(require('./roughHeights'));\n\nvar _scrollbarsVisible = _interopRequireDefault(require('./scrollbarsVisible'));\n\nvar _shallowEqualSelector = _interopRequireDefault(require('./shallowEqualSelector'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule tableHeights\n */\n\n/**\n * Compute the necessary heights for rendering parts of the table\n *\n * @param {{\n *   footerHeight: number,\n *   groupHeaderHeight: number,\n *   headerHeight: number,\n * }} elementHeights\n * @param {number|undefined} ownerHeight\n * @param {number} reservedHeight\n * @param {number} scrollContentHeight\n * @param {{\n *   availableHeight: number,\n *   scrollEnabledX: boolean,\n * }} scrollbarsVisible\n * @param {boolean} useMaxHeight\n * @return {{\n *   bodyHeight: number,\n *   bodyOffsetTop: number,\n *   componentHeight: number,\n *   contentHeight: number,\n *   footOffsetTop: number,\n *   scrollbarXOffsetTop: number,\n *   scrollbarYHeight: number,\n *   visibleRowsHeight: number,\n * }}\n */\n\n\nfunction tableHeights(elementHeights, ownerHeight, reservedHeight, scrollContentHeight, scrollbarsVisible, useMaxHeight, scrollbarXHeight) {\n  var availableHeight = scrollbarsVisible.availableHeight,\n      scrollEnabledX = scrollbarsVisible.scrollEnabledX;\n  var reservedWithScrollbar = reservedHeight;\n\n  if (scrollEnabledX) {\n    reservedWithScrollbar += scrollbarXHeight;\n  } // If less content than space for rows (bodyHeight), then\n  // we should shrink the space for rows to fit our row content (scrollContentHeight).\n\n\n  var bodyHeight = Math.min(availableHeight, scrollContentHeight); // If using max height, component should only be sized to content.\n  // Otherwise use all available height.\n\n  var rowContainerHeight = useMaxHeight ? bodyHeight : availableHeight;\n  var componentHeight = rowContainerHeight + reservedWithScrollbar; // If we have an owner height and it's less than the component height,\n  // adjust visible height so we show footer and scrollbar position at the bottom of owner.\n\n  var visibleRowsHeight = rowContainerHeight;\n\n  if (ownerHeight < componentHeight) {\n    visibleRowsHeight = ownerHeight - reservedWithScrollbar;\n  } // If using max height, virtual row container is scrollContentHeight, otherwise\n  // it is the larger of that or the available height.\n\n\n  var virtualRowContainerHeight = useMaxHeight ? scrollContentHeight : Math.max(scrollContentHeight, availableHeight); // contentHeight is the virtual rows height and reserved height,\n  // or ownerHeight if that's larger\n\n  var contentHeight = virtualRowContainerHeight + reservedWithScrollbar;\n\n  if (ownerHeight) {\n    contentHeight = Math.max(ownerHeight, contentHeight);\n  } // Determine component offsets\n\n\n  var footerHeight = elementHeights.footerHeight,\n      groupHeaderHeight = elementHeights.groupHeaderHeight,\n      headerHeight = elementHeights.headerHeight;\n  var bodyOffsetTop = groupHeaderHeight + headerHeight;\n  var footOffsetTop = bodyOffsetTop + visibleRowsHeight;\n  var scrollbarXOffsetTop = footOffsetTop + footerHeight;\n  var scrollbarYHeight = Math.max(0, footOffsetTop - bodyOffsetTop);\n  return {\n    bodyHeight: bodyHeight,\n    bodyOffsetTop: bodyOffsetTop,\n    componentHeight: componentHeight,\n    contentHeight: contentHeight,\n    footOffsetTop: footOffsetTop,\n    scrollbarXOffsetTop: scrollbarXOffsetTop,\n    scrollbarYHeight: scrollbarYHeight,\n    visibleRowsHeight: visibleRowsHeight\n  };\n}\n\nvar _default = (0, _shallowEqualSelector[\"default\"])([function (state) {\n  return state.elementHeights;\n}, function (state) {\n  return state.tableSize.ownerHeight;\n}, function (state) {\n  return (0, _roughHeights[\"default\"])(state).reservedHeight;\n}, function (state) {\n  return state.scrollContentHeight;\n}, _scrollbarsVisible[\"default\"], function (state) {\n  return state.tableSize.useMaxHeight;\n}, function (state) {\n  return state.scrollbarXHeight;\n}], tableHeights);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/home/discovery/Documents/secure-frontend/node_modules/fixed-data-table-2/internal/tableHeights.js"],"names":["Object","defineProperty","exports","value","_Scrollbar","_interopRequireDefault","require","_roughHeights","_scrollbarsVisible","_shallowEqualSelector","obj","__esModule","tableHeights","elementHeights","ownerHeight","reservedHeight","scrollContentHeight","scrollbarsVisible","useMaxHeight","scrollbarXHeight","availableHeight","scrollEnabledX","reservedWithScrollbar","bodyHeight","Math","min","rowContainerHeight","componentHeight","visibleRowsHeight","virtualRowContainerHeight","max","contentHeight","footerHeight","groupHeaderHeight","headerHeight","bodyOffsetTop","footOffsetTop","scrollbarXOffsetTop","scrollbarYHeight","_default","state","tableSize"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _Scrollbar = _interopRequireDefault(require('./Scrollbar'));\n\nvar _roughHeights = _interopRequireDefault(require('./roughHeights'));\n\nvar _scrollbarsVisible = _interopRequireDefault(require('./scrollbarsVisible'));\n\nvar _shallowEqualSelector = _interopRequireDefault(require('./shallowEqualSelector'));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule tableHeights\n */\n\n/**\n * Compute the necessary heights for rendering parts of the table\n *\n * @param {{\n *   footerHeight: number,\n *   groupHeaderHeight: number,\n *   headerHeight: number,\n * }} elementHeights\n * @param {number|undefined} ownerHeight\n * @param {number} reservedHeight\n * @param {number} scrollContentHeight\n * @param {{\n *   availableHeight: number,\n *   scrollEnabledX: boolean,\n * }} scrollbarsVisible\n * @param {boolean} useMaxHeight\n * @return {{\n *   bodyHeight: number,\n *   bodyOffsetTop: number,\n *   componentHeight: number,\n *   contentHeight: number,\n *   footOffsetTop: number,\n *   scrollbarXOffsetTop: number,\n *   scrollbarYHeight: number,\n *   visibleRowsHeight: number,\n * }}\n */\nfunction tableHeights(elementHeights, ownerHeight, reservedHeight, scrollContentHeight, scrollbarsVisible, useMaxHeight, scrollbarXHeight) {\n  var availableHeight = scrollbarsVisible.availableHeight,\n      scrollEnabledX = scrollbarsVisible.scrollEnabledX;\n  var reservedWithScrollbar = reservedHeight;\n\n  if (scrollEnabledX) {\n    reservedWithScrollbar += scrollbarXHeight;\n  } // If less content than space for rows (bodyHeight), then\n  // we should shrink the space for rows to fit our row content (scrollContentHeight).\n\n\n  var bodyHeight = Math.min(availableHeight, scrollContentHeight); // If using max height, component should only be sized to content.\n  // Otherwise use all available height.\n\n  var rowContainerHeight = useMaxHeight ? bodyHeight : availableHeight;\n  var componentHeight = rowContainerHeight + reservedWithScrollbar; // If we have an owner height and it's less than the component height,\n  // adjust visible height so we show footer and scrollbar position at the bottom of owner.\n\n  var visibleRowsHeight = rowContainerHeight;\n\n  if (ownerHeight < componentHeight) {\n    visibleRowsHeight = ownerHeight - reservedWithScrollbar;\n  } // If using max height, virtual row container is scrollContentHeight, otherwise\n  // it is the larger of that or the available height.\n\n\n  var virtualRowContainerHeight = useMaxHeight ? scrollContentHeight : Math.max(scrollContentHeight, availableHeight); // contentHeight is the virtual rows height and reserved height,\n  // or ownerHeight if that's larger\n\n  var contentHeight = virtualRowContainerHeight + reservedWithScrollbar;\n\n  if (ownerHeight) {\n    contentHeight = Math.max(ownerHeight, contentHeight);\n  } // Determine component offsets\n\n\n  var footerHeight = elementHeights.footerHeight,\n      groupHeaderHeight = elementHeights.groupHeaderHeight,\n      headerHeight = elementHeights.headerHeight;\n  var bodyOffsetTop = groupHeaderHeight + headerHeight;\n  var footOffsetTop = bodyOffsetTop + visibleRowsHeight;\n  var scrollbarXOffsetTop = footOffsetTop + footerHeight;\n  var scrollbarYHeight = Math.max(0, footOffsetTop - bodyOffsetTop);\n  return {\n    bodyHeight: bodyHeight,\n    bodyOffsetTop: bodyOffsetTop,\n    componentHeight: componentHeight,\n    contentHeight: contentHeight,\n    footOffsetTop: footOffsetTop,\n    scrollbarXOffsetTop: scrollbarXOffsetTop,\n    scrollbarYHeight: scrollbarYHeight,\n    visibleRowsHeight: visibleRowsHeight\n  };\n}\n\nvar _default = (0, _shallowEqualSelector[\"default\"])([function (state) {\n  return state.elementHeights;\n}, function (state) {\n  return state.tableSize.ownerHeight;\n}, function (state) {\n  return (0, _roughHeights[\"default\"])(state).reservedHeight;\n}, function (state) {\n  return state.scrollContentHeight;\n}, _scrollbarsVisible[\"default\"], function (state) {\n  return state.tableSize.useMaxHeight;\n}, function (state) {\n  return state.scrollbarXHeight;\n}], tableHeights);\n\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}